<?php

namespace Tom32i\UserBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface

{
    public function search($search)
    {   
        $sql = "SELECT u FROM Tom32i\UserBundle\Entity\User u 
                WHERE u.usernameCanonical LIKE :search 
                OR u.emailCanonical LIKE :search 
                OR u.fullname LIKE :search 
                AND u.enabled = 1 
                ORDER BY u.usernameCanonical ASC";

        $query = $this->_em->createQuery($sql)
                ->setParameter('search', "%".$search."%");
        
        //var_dump($query->getSQL());
        //exit();
        
        return $query->getResult();
    }

    public function getByComment($resource_id, $curent_user)
    {
        $sql = "SELECT u FROM Tom32i\UserBundle\Entity\User u  
                WHERE u.id IN (
                    SELECT cu.id FROM Tom32i\SiteBundle\Entity\Comment c 
                    INNER JOIN c.user cu 
                    WHERE c.resource = :resource
                    AND c.user != :current
                    GROUP BY cu.id
                )";

        $query = $this->_em->createQuery($sql);
        $query->setParameter('resource', $resource_id);
        $query->setParameter('current', $curent_user);
        
        return $query->getResult();
    }

	public function loadUserByUsername($usernameOrEmail)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $usernameOrEmail)
            ->setParameter('email', $usernameOrEmail)
            ->getQuery()
        ;

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find an active admin Tom32iUserBundle:User object identified by "%s".', $usernameOrEmail), null, 0, $e);
        }

        return $user;
    }

    /*public function findByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.username = :username')
            ->setParameter('username', $username)
            ->getQuery()
        ;

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find an active admin Tom32iUserBundle:User object identified by "%s".', $username), null, 0, $e);
        }

        return $user;
    }*/

    public function loadUserByTwitterUserId($twitterUserId)
    {
        $q = $this
            ->createQueryBuilder('u')
            ->where('u.twitterUserId = :id')
            ->setParameter('id', $twitterUserId)
            ->getQuery()
        ;

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find an active admin Tom32iUserBundle:User object identified by "%s".', $username), null, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }
}
